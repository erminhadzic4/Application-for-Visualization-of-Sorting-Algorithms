<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnPocetak.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAB3RJTUUH5gcMDSsqUSyWewAAAVRJREFU
        SEvt1D1Lw1AUxvFoEQSHWlHEqYhowdeP4CIOTmLBvU7Vwcmhk7roqoPfQSfdFVTEUaguQgcnEYRuhYKK
        b/8nejFc7o1V4lQf+NHmkp6Tm5wmaMp0oBd96EQKDacNPZ+fdrqwgANc4wZn2MAEWvBt8rjCXHj0lRz2
        8YgnVHGPOl5RwTxaEZt1vGEtPPrIMI6h9UsUMYoBzGAPanyHacTGbqDiJ9CaPsdhJ40t6JxDZOCNabCK
        QUSLj8CXLMqoYUoLvpgGu9DV6PsptJO46N7vQOcva8EX0+ABzziCHnAj2YR+WwqPPDENTBPtRLdL6zIL
        1wi3Qw/7BQUt+LIC08DlAt2wMwmN7S3GtOBLP9REV6tJsrl2oOdzDl3ANlw7/HWiY6yh0DQllmhxTVrc
        GP84/8Wd+dPiQzBvVDVJtLiyBP1LVVw7STx69y9CO2mqBME7bzJhUcPGAq0AAAAASUVORK5CYII=
</value>
  </data>
  <data name="rtxtBoxInfo.Text" xml:space="preserve">
    <value>Trenutno podrzava 8 dobro poznatih algoritama za sortiranje. Nakon izabira kartice, moguce je generisati niz od 660 nasumicnih vrijednosti. Velicina niza je dinamicna, tacnije ovisi od sirine unutarnjeg kanvasa koju sam fiksirao na 660px.

U prvom planu aplikacija je imala i dugme za stopiranje sortiranja, medjutim to dugme sam izbacio jer neki algoritmi ne dozvoljavaju stopiranje nakon sto se pocnu izvrsavati. 

Pored kartica za individualne algoritme, postoji i kartica za poredjenje algoritama, u kojoj su svih 8 algoritama poredani jedno pored drugog te se izvrsavaju uporedo, pritom spasavajuci informacije o vremenu izvrsavanja, poredjenju elemenata niza, te pristupu samim nizovima svih algoritama. Nakon sto se poredjenje zavrsi, moguce je klikom na dugme "Otvori tabelu" otvoriti spreadsheet u kojem se nalaze sve vec pomenute informacije za detaljniju i pregledniju analizu.

Kartica "Postavke" omogucava iskljucivanje tj. ukljucivanje pracenja pomenutih informacija, kao i mogucnost spasavanja svih informacija o poredjenju u .txt file unutar foldera "Postavke"

Zbog same prirode aplikacije, moguce je da ponekad dodje do pogresno iscrtane linije na ekranu prilikom sortiranja, razlog tome je koristena Microsoftova biblioteka koja nije najoptimalnija za sve vrste grafickih kartica. Naravno kod nekog uopce ne mora doci do te greske, ali ja sam je kod sebe spazio par puta, pa je najbolje da spomenem i to za svaki slucaj.</value>
  </data>
</root>